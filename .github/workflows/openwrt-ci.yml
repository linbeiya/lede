name: Build H68K Firmware

on:
  workflow_dispatch:    # 手动触发
  push:
    paths:
      - '.config'
      - 'diy-part*.sh'
      - '.github/workflows/openwrt-ci.yml'

env:
  REPO_BRANCH: master
  CONFIG_FILE: .config.minimal  # 使用最小化配置避免空间不足
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: false  # 不上传 bin 目录以节省空间
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false  # 不创建 release 以节省空间
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        echo "清理系统空间..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Setup build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "$TZ"
        sudo apt-get clean

    - name: Update & install feeds
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply .config
      run: |
        if [ ! -f .config ]; then
          cp "${{ env.CONFIG_FILE }}" .config
          echo "复制了 .config 文件"
        else
          echo ".config 文件已存在，跳过复制"
        fi
        echo "当前 .config 文件前20行内容："
        head -20 .config
        echo "验证目标平台配置："
        grep "CONFIG_TARGET_" .config | head -5

    - name: Run DIY part 1 (before defconfig)
      if: ${{ env.DIY_P1_SH != '' }}
      run: |
        if [ -f "${{ env.DIY_P1_SH }}" ]; then
          chmod +x "${{ env.DIY_P1_SH }}"
          ./"${{ env.DIY_P1_SH }}"
        else
          echo "${{ env.DIY_P1_SH }} not found, skipping"
        fi

    - name: Run DIY part 2 (after defconfig)
      if: ${{ env.DIY_P2_SH != '' }}
      run: |
        if [ -f "${{ env.DIY_P2_SH }}" ]; then
          chmod +x "${{ env.DIY_P2_SH }}"
          ./"${{ env.DIY_P2_SH }}"
        else
          echo "${{ env.DIY_P2_SH }} not found, skipping"
        fi
        
    - name: Download dependencies
      run: |
        echo "开始下载编译依赖..."
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "清理下载缓存..."
        rm -rf $(find dl -name "*.tmp" -o -name "*.part")
        df -h

    - name: Compile firmware
      run: |
        echo "开始编译 H68K 固件..."
        echo "编译开始时间: $(date)"
        echo "可用磁盘空间:"
        df -h

        # 使用较少的并行任务以节省内存和磁盘空间
        make -j2 V=s || make -j1 V=s

        echo "编译结束时间: $(date)"
        echo "编译后磁盘使用情况:"
        df -h

    - name: Check compile result and cleanup
      run: |
        echo "检查编译结果..."
        ls -la bin/targets/*/
        if [ -d "bin/targets/armsr/armv8" ]; then
          echo "H68K 固件编译成功！"
          ls -la bin/targets/armsr/armv8/

          # 清理不必要的文件以节省空间
          echo "清理编译临时文件..."
          rm -rf build_dir/host
          rm -rf build_dir/toolchain-*
          rm -rf staging_dir/host
          rm -rf tmp
          find bin/targets/armsr/armv8/ -name "*.buildinfo" -delete
          find bin/targets/armsr/armv8/ -name "*.manifest" -delete

          echo "清理后的固件文件："
          ls -la bin/targets/armsr/armv8/
        else
          echo "编译失败，检查目录结构："
          find bin/targets/ -name "*.img*" -o -name "*.bin" -o -name "*.gz" | head -10
        fi

        echo "最终磁盘使用情况："
        df -h

    - name: Upload firmware only
      uses: actions/upload-artifact@v4
      with:
        name: H68K-OpenWrt-Firmware
        path: |
          bin/targets/armsr/armv8/*.img.gz
          bin/targets/armsr/armv8/*.bin
        retention-days: 7

    - name: Clean up old workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}
